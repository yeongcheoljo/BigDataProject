# -*- coding: utf-8 -*-
"""이용량 시각화.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qfBN2iddZm5sj-9LqEYln3e31b9dFMpC
"""

# 단계 1: 폰트 설치
import matplotlib.font_manager as fm
import matplotlib.pyplot as plt

!apt-get -qq -y install fonts-nanum > /dev/null
#fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

#font = fm.FontProperties(fname=fontpath, size=9)

#fm._rebuild()



fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

# 단계 2: 런타임 재시작
import os
os.kill(os.getpid(), 9)

# 단계 3: 한글 폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False

# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

import pandas as pd
import numpy as np

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig')

df_g = df.loc[df.groupby(['노선', '이용자유형', '월'])['합계'].idxmax()]

df_g.to_csv('노선_이용자유형_월_max_합계.csv', index=False, encoding='utf-8-sig')

#전처리 데이터의 '노선'열의 unique값이 int와 str로 나뉘어
#데이터를 추출시 519번 1월 데이터의 정류장번호 0~32번 데이터가 나머지 519번 데이터와 조건을 따로 적용하여 추출됨
import pandas as pd
import numpy as np

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig')

df['노선'].unique()

#노선, 이용자유형, 월별 '합계' 열의 이용량이 가장 많은 데이터 추출
import pandas as pd
import numpy as np

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig', dtype={'노선': str})

df_g = df.loc[df.groupby(['노선', '이용자유형', '월'])['합계'].idxmax()]

df_g.to_csv('노선_이용자유형_월_max_합계.csv', index=False, encoding='utf-8-sig')

#노선, 이용자유형, 월별 특정 시간대의 이용량이 가장 많은 데이터 추출
import pandas as pd
import numpy as np

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig', dtype={'노선': str})

for month in range(5, 24):
    month_str = f"{month:02}"

    if month_str in df.columns:
        df_g = df.loc[df.groupby(['노선', '이용자유형', '월'])[month_str].idxmax()]
        df_g[df_g['이용자유형'] == '합계'].drop

        output_file = f"노선_이용자유형_월_max_{month_str}.csv"
        df_g.to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f"Saved file for column '{month_str}' to '{output_file}'")
    else:
        print(f"Column '{month_str}' does not exist in the DataFrame. Skipping...")

#노선, 이용자유형, 월별 이용량이 가장 많은 데이터 합산
from openpyxl import load_workbook
import pandas as pd
import glob


file_path = "/content/노선_이용자유형_월_max_*.csv"
all_files = sorted(glob.glob(file_path))

df_list = []

for file in all_files:
    df = pd.read_csv(file, encoding='utf-8-sig')
    df_list.append(df)

combined_df = pd.concat(df_list, ignore_index=True)

combined_df.to_csv('노선_이용자유형_월_max_combine.csv', index=False, encoding='utf-8-sig')

#'이용자유형' 열의 값이 '합계'인 행 제거
import pandas as pd
import numpy as np

file_path = "/content/노선_이용자유형_월_max_combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig')

df = df[df['이용자유형'] != '합계']

df.to_csv('노선_이용자유형_월_max_combine_합계제거.csv', index=False, encoding='utf-8-sig')

#이용량 많은 상위 10개 정류장 이용량 시각화
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

file_path = "/content/노선_이용자유형_월_max_combine_합계제거.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig')

#전체 정류장 수count
df_g = df['정류장'].value_counts()

#데이터 시각화
#데이터의 상위10개 데이터를 그래프로 시각화
top_10 = df_g.head(10)  # 상위 10개 추출
plt.figure(figsize=(10, 6))  # 그래프 크기 설정
top_10.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title(f"전체 이용량이 많은 정류장 (상위 10개)", fontsize=14)
plt.xlabel("정류장", fontsize=12)
plt.ylabel("이용량 (건수)", fontsize=12)
plt.xticks(rotation=45, ha='right')  # x축 라벨 회전
plt.tight_layout()  # 그래프 여백 조정
plt.grid(axis='y', linestyle='--', alpha=0.7)

#그래프 저장
graph_file = f"전체 이용량 많은 정류장.png"
plt.savefig(graph_file, dpi=300)
plt.close()

#그래프 다운로드
files.download(graph_file)

df_g.to_csv('이용량 많은 정류장 count.csv', index=True, encoding='utf-8-sig')

#월별, 이용자유형별 이용량 많은 상위10개 정류장 이용량 시각화
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# File path
file_path = "/content/노선_이용자유형_월_max_combine_합계제거.csv"

# Load data
df = pd.read_csv(file_path, encoding='utf-8-sig')

# 월별 정류장 수count
#df_g = df.groupby(['월'])['정류장'].value_counts().reset_index(name='count')

#이용자유형별 정류장 수count
#df_g = df.groupby(['이용자유형'])['정류장'].value_counts().reset_index(name='count')

#월별, 이용자유형별로 그룹을 만들어 상위10개 데이터 추출
top_5_per_month = df_g.groupby('노선').apply(lambda x: x.nlargest(10, 'count')).reset_index(drop=True)

# Pivot the data for grouped bar chart
pivot_data = top_5_per_month.pivot(index='정류장', columns='노선', values='count').fillna(0)

# Plot grouped bar chart
pivot_data.plot(kind='bar', figsize=(14, 8), width=0.8, colormap='viridis', edgecolor='black')

# Set plot styles
plt.title("노선별 이용량 많은 상위10개 정류장 이용량", fontsize=16)
plt.xlabel("정류장", fontsize=14)
plt.ylabel("이용량", fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.legend(title="노선", fontsize=10)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Save and download the graph
graph_file = "노선별 이용량 많은 상위10개 정류장 이용량.png"
plt.savefig(graph_file, dpi=300)
plt.close()
files.download(graph_file)

# Save and download the top 5 stops per month as a CSV
output_csv = "노선별 이용량 많은 상위10개 정류장 이용량.csv"
top_5_per_month.to_csv(output_csv, index=False, encoding='utf-8-sig')
files.download(output_csv)

#노선별 이용량 많은 상위10개 정류장 이용량 시각화
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
import plotly.express as px

# File path
file_path = "/content/노선_이용자유형_월_max_combine_합계제거.csv"

# Load data
df = pd.read_csv(file_path, encoding='utf-8-sig')

#노선별 정류장 수count
df_g = df.groupby(['노선'])['정류장'].value_counts().reset_index(name='count')

#노선별로 그룹을 만들어 상위10개 데이터 추출
top_10_per_route = df_g.groupby('노선').apply(lambda x: x.nlargest(10, 'count')).reset_index(drop=True)

# Create the interactive plot
fig = px.bar(
    top_10_per_route,
    x="정류장",
    y="count",
    color="노선",
    animation_frame="노선",  # Adds a dropdown to select the route
    title="노선별 이용량 많은 상위10개 정류장 이용량",
    labels={"count": "이용량", "정류장": "정류장", "노선": "노선"},
    color_discrete_sequence=px.colors.qualitative.Vivid
)

# Customize layout
fig.update_layout(
    xaxis=dict(title="정류장", tickangle=45),
    yaxis=dict(title="이용량"),
    legend=dict(title="노선"),
    margin=dict(l=50, r=50, t=50, b=50),
    showlegend=False,
)

# Show the plot
fig.show()

# Save as an interactive HTML file
fig.write_html("노선별 이용량 많은 상위10개 정류장 이용량.html")
files.download("노선별 이용량 많은 상위10개 정류장 이용량.html")  # Download the HTML file

# Save the data to CSV
output_csv = "노선별 이용량 많은 상위10개 정류장 이용량.csv"
top_5_per_month.to_csv(output_csv, index=False, encoding='utf-8-sig')
files.download(output_csv)