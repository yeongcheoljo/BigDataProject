# -*- coding: utf-8 -*-
"""시간대별 이용량 시각화.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-MVYBSGOfzVxIPg6QAl-agbKLj0Xg1tx
"""

# 단계 1: 폰트 설치
import matplotlib.font_manager as fm
import matplotlib.pyplot as plt

!apt-get -qq -y install fonts-nanum > /dev/null
#fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

#font = fm.FontProperties(fname=fontpath, size=9)

#fm._rebuild()



fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

# 단계 2: 런타임 재시작
import os
os.kill(os.getpid(), 9)

# 단계 3: 한글 폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False

# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

#노선, 이용자유형, 월별 '합계' 열의 이용량이 가장 많은 데이터 추출
import pandas as pd
import numpy as np

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig', dtype={'노선': str})

df_g = df.loc[df.groupby(['노선', '이용자유형', '월'])['합계'].idxmax()]

df_g.to_csv('노선_이용자유형_월_max_합계.csv', index=False, encoding='utf-8-sig')

#노선, 이용자유형, 월별 특정 시간대의 이용량이 가장 많은 데이터 추출
#추출한 데이터의 정류장 수count한 데이터 추출
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

file_path = "/content/노선별 이용량 전처리 23-combine.csv"

df = pd.read_csv(file_path, encoding='utf-8-sig', dtype={'노선': str})

for time in range(5, 24):
    time_str = f"{time:02}"

    if time_str in df.columns:
        df_g = df.loc[df.groupby(['노선', '이용자유형', '월'])[time_str].idxmax()]
        df_g = df_g[df_g['이용자유형'] != '합계']

        #전체 정류장 수count
        df_g = df_g['정류장'].value_counts()

        #시간별 데이터의 상위10개 데이터를 그래프로 시각화
        top_10 = df_g.head(10)  # 상위 10개 추출
        plt.figure(figsize=(10, 6))  # 그래프 크기 설정
        top_10.plot(kind='bar', color='skyblue', edgecolor='black')
        plt.title(f"{time_str}시 이용량이 많은 정류장 (상위 10개)", fontsize=14)
        plt.xlabel("정류장", fontsize=12)
        plt.ylabel("이용량 (건수)", fontsize=12)
        plt.xticks(rotation=45, ha='right')  # x축 라벨 회전
        plt.tight_layout()  # 그래프 여백 조정
        plt.grid(axis='y', linestyle='--', alpha=0.7)

        #그래프 저장
        graph_file = f"시간대별 이용량 많은 정류장_{time_str}.png"
        plt.savefig(graph_file, dpi=300)
        plt.close()
        print(f"Saved graph for column '{time_str}' to '{graph_file}'")

        #그래프 다운로드
        if(time >= 15):
          files.download(graph_file)

        output_file = f"시간대별 이용량 많은 정류장_{time_str}.csv"
        df_g.to_csv(output_file, index=True, encoding='utf-8-sig')
        print(f"Saved file for column '{time_str}' to '{output_file}'")
    else:
        print(f"Column '{time_str}' does not exist in the DataFrame. Skipping...")